{"version":3,"sources":["../src/diagramControl.js"],"names":["getColorForValue","data","value","console","info","debug","i","thresholds","length","colorMap","_","first","TimeSeries","kbn","MetricsPanelCtrl","diagramEditor","displayEditor","panelDefaults","initialZoom","colors","showLegend","maxDataPoints","mappingType","nullPointMode","format","valueName","valueMaps","op","text","content","DiagramCtrl","$scope","$injector","$sce","defaults","panel","graphId","id","containerDivId","svg","events","on","onInitEditMode","bind","onDataReceived","initializeMermaid","mermaidAPI","initialize","startOnLoad","cloneCssStyles","logLevel","flowchart","useMaxWidth","parseError","handleParseError","err","hash","addEditorTab","dataList","series","map","seriesHandler","setValues","updateDiagram","seriesData","datapoints","alias","target","flotpairs","getFlotPairs","$","remove","clearDiagram","_this","graphDefinition","renderCallback","svgCode","bindFunctions","updateStyle","trustAsHtml","render","key","seriesItem","targetElement","find","color","children","css","html","colorData","split","strVale","Number","trim","lastPoint","last","lastValue","isArray","valueRounded","valueFormated","isString","escape","stats","decimalInfo","getDecimalsForValue","formatFunc","valueFormats","decimals","scaledDecimals","roundValue","tmp","isNumber","delta","dec","Math","floor","log","LN10","magn","pow","norm","size","result","max","scope","elem","attrs","ctrl","diagramElement","templateUrl"],"mappings":"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","file":"diagramControl.js","sourcesContent":["import './libs/mermaid/dist/mermaidAPI';\r\nimport TimeSeries from 'app/core/time_series2';\r\nimport kbn from 'app/core/utils/kbn';\r\nimport {MetricsPanelCtrl} from 'app/plugins/sdk';\r\nimport {diagramEditor, displayEditor} from './properties';\r\nimport _ from 'lodash';\r\nimport './libs/mermaid/dist/mermaid.forest.css!'\r\nimport './diagram.css!'\r\n\r\nconst panelDefaults = {\r\n\tinitialZoom: 1,\r\n\tthresholds: '0,10',\r\n\tcolors: ['rgba(245, 54, 54, 0.9)', 'rgba(237, 129, 40, 0.89)', 'rgba(50, 172, 45, 0.97)'],\r\n\tshowLegend: true,\r\n\tmaxDataPoints: 100,\r\n\tmappingType: 1,\r\n\tnullPointMode: 'connected',\r\n\tformat: 'none',\r\n\tvalueName: 'avg',\r\n    valueMaps: [\r\n      { value: 'null', op: '=', text: 'N/A' }\r\n    ],\r\n\tcontent: 'graph LR\\n' +\r\n\t\t'A[Square Rect] -- Link text --> B((Circle))\\n' +\r\n\t\t'A --> C(Round Rect)\\n' +\r\n\t\t'B --> D{Rhombus}\\n' +\r\n\t\t'C --> D\\n'\r\n};\r\n\r\nclass DiagramCtrl extends MetricsPanelCtrl {\r\n\tconstructor($scope, $injector, $sce) {\r\n\t\tsuper($scope, $injector);\r\n\t\t_.defaults(this.panel, panelDefaults);\r\n\t\t\r\n\t\tthis.panel.graphId = 'diagram_' + this.panel.id;\r\n\t\tthis.containerDivId = 'container_'+this.panel.graphId;\r\n\t\tthis.svg = {};\t\t\r\n\t\tthis.$sce = $sce;\r\n\t\tthis.events.on('init-edit-mode', this.onInitEditMode.bind(this));\r\n\t\tthis.events.on('data-received', this.onDataReceived.bind(this));\r\n\t\tthis.events.on('data-snapshot-load', this.onDataReceived.bind(this));\r\n\t\tthis.initializeMermaid();\r\n\t}\r\n\t\r\n\tinitializeMermaid(){\r\n\t\tmermaidAPI.initialize({\r\n\t\t    startOnLoad:false,\r\n\t\t    cloneCssStyles: false,\r\n\t\t    logLevel: 1,\r\n\t\t    flowchart:{\r\n\t\t\t\tuseMaxWidth: true\r\n\t\t\t}\r\n\t\t});\r\n\t\tmermaidAPI.parseError = this.handleParseError.bind(this);\r\n\t}\r\n\t\r\n\thandleParseError(err, hash){\r\n\t\tthis.svg = '<p>Diagram Definition:</p><pre>' + err + '</pre>';\r\n\t}\r\n\t\r\n\tonInitEditMode() {\r\n\t\tthis.addEditorTab('Diagram', diagramEditor, 2);\r\n\t\tthis.addEditorTab('Display', displayEditor, 3);\r\n\t}\r\n\t\r\n\tonDataReceived(dataList){\r\n\t\tconsole.info('received data');\r\n\t\tconsole.debug(dataList);\r\n\t\tthis.series = dataList.map(this.seriesHandler.bind(this));\r\n\t\tconsole.info('mapped dataList to series');\r\n\t\tconsole.debug(this.series);\r\n\r\n\t\tvar data = {};\r\n\t\tthis.setValues(data);\r\n\t\tthis.updateDiagram(data);\r\n\t}\r\n\r\n\tseriesHandler(seriesData) {\r\n\t\tvar series = new TimeSeries({\r\n\t\t\tdatapoints: seriesData.datapoints,\r\n\t\t\talias: seriesData.target,\r\n\t\t});\r\n\t    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\r\n\t    return series;\r\n\t} // End seriesHandler()\r\n\t\r\n\tclearDiagram(){\r\n\t\t$('#'+this.panel.graphId).remove();\r\n\t\tthis.svg = {};\r\n\t}\r\n\r\n\tupdateDiagram(data){\r\n\t\tif(this.panel.content.length > 0){\r\n\t\tthis.clearDiagram();\r\n\t\tvar _this = this;\r\n\t\tvar graphDefinition = this.panel.content;\r\n\t\tvar renderCallback = function (svgCode, bindFunctions){\r\n\t\t    var svg = _this.updateStyle(svgCode, data);\r\n\t\t    _this.svg = _this.$sce.trustAsHtml(svg);\r\n\t\t};\r\n\t    mermaidAPI.render(this.panel.graphId, graphDefinition, renderCallback);\r\n\t\t}\r\n\t} // End updateDiagram()\r\n\t\r\n\tupdateStyle(svgCode, data){\r\n\t\tconsole.info('updating svg style');\r\n\t\tvar svg = $('<div>' + svgCode + '</div>');\r\n\t\tfor(var key in data){\r\n\t\t\tvar seriesItem = data[key];\r\n\t\t\tvar targetElement = $(svg).find('#'+key).first();\r\n\t\t\tconsole.info('setting node:' + key + ' to color:' + seriesItem.color);\r\n\t\t\ttargetElement.children().css('fill', seriesItem.color);\r\n\t\t}\r\n\t\treturn $(svg).html();\r\n\t} // End updateStyle()\r\n\t\r\n\tsetValues(data) {\r\n\t\tvar colorData = {};\r\n\t\tcolorData.thresholds = this.panel.thresholds.split(',').map(function(strVale) {\r\n\t\t\treturn Number(strVale.trim());\r\n\t\t});\r\n\t\tcolorData.colorMap = this.panel.colors;\r\n\t\t\r\n\t    if (this.series && this.series.length > 0) {\r\n\t\t\tfor(var i = 0; i < this.series.length; i++){\r\n\t\t\t\tvar seriesItem = this.series[i];\r\n\t\t\t\tconsole.debug('setting values for series');\r\n\t\t\t\tconsole.debug(seriesItem);\r\n\t\t\t\tdata[seriesItem.alias] = {};\r\n\t\t\t\tvar lastPoint = _.last(seriesItem.datapoints);\r\n\t\t\t    var lastValue = _.isArray(lastPoint) ? lastPoint[0] : null;\r\n\t\t\t\r\n\t\t\t\tif (this.panel.valueName === 'name') {\r\n\t\t\t\t\tdata[seriesItem.alias].value = 0;\r\n\t\t\t        data[seriesItem.alias].valueRounded = 0;\r\n\t\t\t        data[seriesItem.alias].valueFormated = seriesItem.alias;\r\n\t\t\t\t} else if (_.isString(lastValue)) {\r\n\t\t\t        data[seriesItem.alias].value = 0;\r\n\t\t\t        data[seriesItem.alias].valueFormated = _.escape(lastValue);\r\n\t\t\t        data[seriesItem.alias].valueRounded = 0;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdata[seriesItem.alias].value = seriesItem.stats[this.panel.valueName];\r\n\t\t\t        //data[seriesItem.alias].flotpairs = seriesItem.flotpairs;\r\n\t\t\t\r\n\t\t\t        var decimalInfo = this.getDecimalsForValue(data[seriesItem.alias].value);\r\n\t\t\t        var formatFunc = kbn.valueFormats[this.panel.format];\r\n\t\t\t        data[seriesItem.alias].valueFormated = formatFunc(data[seriesItem.alias].value, decimalInfo.decimals, decimalInfo.scaledDecimals);\r\n\t\t\t        data[seriesItem.alias].valueRounded = kbn.roundValue(data[seriesItem.alias].value, decimalInfo.decimals);\r\n\t\t\t\t}\r\n\t\t\t\tdata[seriesItem.alias].color = getColorForValue(colorData, data[seriesItem.alias].value);\r\n\t\t\t}\r\n\t    }\r\n\t} // End setValues()\r\n\t\r\n\tinvertColorOrder() {\r\n\t    var tmp = this.panel.colors[0];\r\n\t    this.panel.colors[0] = this.panel.colors[2];\r\n\t    this.panel.colors[2] = tmp;\r\n\t}\r\n\r\n\tgetDecimalsForValue(value) {\r\n\t    if (_.isNumber(this.panel.decimals)) {\r\n\t      return {decimals: this.panel.decimals, scaledDecimals: null};\r\n\t    }\r\n\r\n\t    var delta = value / 2;\r\n\t    var dec = -Math.floor(Math.log(delta) / Math.LN10);\r\n\t\r\n\t    var magn = Math.pow(10, -dec),\r\n\t      norm = delta / magn, // norm is between 1.0 and 10.0\r\n\t      size;\r\n\t\r\n\t    if (norm < 1.5) {\r\n\t      size = 1;\r\n\t    } else if (norm < 3) {\r\n\t      size = 2;\r\n\t      // special case for 2.5, requires an extra decimal\r\n\t      if (norm > 2.25) {\r\n\t        size = 2.5;\r\n\t        ++dec;\r\n\t      }\r\n\t    } else if (norm < 7.5) {\r\n\t      size = 5;\r\n\t    } else {\r\n\t      size = 10;\r\n\t    }\r\n\t\r\n\t    size *= magn;\r\n\t\r\n\t    // reduce starting decimals if not needed\r\n\t    if (Math.floor(value) === value) { dec = 0; }\r\n\t\r\n\t    var result = {};\r\n\t    result.decimals = Math.max(0, dec);\r\n\t    result.scaledDecimals = result.decimals - Math.floor(Math.log(size) / Math.LN10) + 2;\r\n\t\r\n\t    return result;\r\n\t}\r\n\t\r\n\tlink(scope, elem, attrs, ctrl) {\r\n\t    var diagramElement = elem.find('.diagram');\r\n    \tconsole.debug('found diagram panel');\r\n    \tconsole.debug(diagramElement);\r\n\t}\r\n  \r\n// End Class\r\n}\r\n\r\nfunction getColorForValue(data, value) {\r\n\tconsole.info('Getting color for value');\r\n\tconsole.debug(data);\r\n\tconsole.debug(value);\r\n\tfor (var i = data.thresholds.length; i > 0; i--) {\r\n\t\tif (value >= data.thresholds[i-1]) {\r\n\t\treturn data.colorMap[i];\r\n\t}\r\n  }\r\n  return _.first(data.colorMap);\r\n}\r\n\r\nDiagramCtrl.templateUrl = 'module.html';\r\n\r\nexport {\r\n\tDiagramCtrl,\r\n\tDiagramCtrl as MetricsPanelCtrl\r\n};"]}